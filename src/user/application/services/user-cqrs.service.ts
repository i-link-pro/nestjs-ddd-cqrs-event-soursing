import { Injectable } from '@nestjs/common';
import { Mediator } from '@shared/application/mediator.interface';
import { CreateUserCommand } from '../commands/create-user.command';
import { UpdateUserCommand } from '../commands/update-user.command';
import { ActivateUserCommand } from '../commands/handlers/activate-user.handler';
import { GetUserQuery, GetUserByEmailQuery, GetUsersQuery } from '../queries/get-user.query';
import { GetUserAnalyticsQuery } from '../queries/user-analytics.query';
import { UserReadModel } from '../../infrastructure/read-models/user.read-model';
import { PaginatedResult } from '@shared/application/query.interface';

/**
 * CQRS —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * 
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ CQRS
 * —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞—Ç–æ—Ä. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
 * –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É @nestjs/cqrs.
 */
@Injectable()
export class UserCqrsService {
  constructor(private readonly mediator: Mediator) {}

  /**
   * === –ö–û–ú–ê–ù–î–´ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è) ===
   */

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ CQRS
   */
  async createUser(data: {
    email: string;
    firstName: string;
    lastName: string;
  }): Promise<any> {
    const command = new CreateUserCommand(
      data.email,
      data.firstName,
      data.lastName
    );

    const result = await this.mediator.send(command);
    
    if (!result.success) {
      throw new Error(result.error);
    }

    return result.data;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ CQRS
   */
  async updateUser(data: {
    userId: string;
    email?: string;
    firstName?: string;
    lastName?: string;
  }): Promise<any> {
    const command = new UpdateUserCommand(
      data.userId,
      data.email,
      data.firstName,
      data.lastName
    );

    const result = await this.mediator.send(command);
    
    if (!result.success) {
      throw new Error(result.error);
    }

    return result.data;
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ CQRS
   */
  async activateUser(userId: string): Promise<any> {
    const command = new ActivateUserCommand(userId);

    const result = await this.mediator.send(command);
    
    if (!result.success) {
      throw new Error(result.error);
    }

    return result.data;
  }

  /**
   * === –ó–ê–ü–†–û–°–´ (—á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö) ===
   */

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —á–µ—Ä–µ–∑ CQRS
   */
  async getUserById(userId: string): Promise<UserReadModel | null> {
    const query = new GetUserQuery(userId);
    return await this.mediator.query(query);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email —á–µ—Ä–µ–∑ CQRS
   */
  async getUserByEmail(email: string): Promise<UserReadModel | null> {
    const query = new GetUserByEmailQuery(email);
    return await this.mediator.query(query);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ CQRS
   */
  async getUsers(params: {
    page?: number;
    limit?: number;
    status?: string;
    emailVerified?: boolean;
    sortBy?: string;
    sortOrder?: 'ASC' | 'DESC';
  }): Promise<PaginatedResult<UserReadModel>> {
    const query = new GetUsersQuery(
      params.page || 1,
      params.limit || 10,
      params.status,
      params.emailVerified,
      params.sortBy || 'createdAt',
      params.sortOrder || 'DESC'
    );

    return await this.mediator.query(query);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ CQRS
   */
  async getUserAnalytics(period: 'day' | 'week' | 'month' | 'year' = 'month'): Promise<any> {
    const query = new GetUserAnalyticsQuery(period);
    return await this.mediator.query(query);
  }

  /**
   * === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ï–ò–ú–£–©–ï–°–¢–í CQRS ===
   */

  /**
   * –°–ª–æ–∂–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∞—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  async createAndRetrieveUser(data: {
    email: string;
    firstName: string;
    lastName: string;
  }): Promise<{
    user: any;
    readModel: UserReadModel | null;
    analytics: any;
  }> {
    console.log('üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è CQRS: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å');

    // 1. –ö–æ–º–∞–Ω–¥–∞: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.createUser(data);
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');

    // 2. –ó–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–µ–Ω–∏–µ read model
    const readModel = await this.getUserById(user.id);
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: read model –ø–æ–ª—É—á–µ–Ω–∞');

    // 3. –ó–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    const analytics = await this.getUserAnalytics('month');
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞');

    return {
      user,
      readModel,
      analytics
    };
  }

  /**
   * –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ CQRS
   */
  async batchProcessUsers(operations: Array<{
    type: 'create' | 'update' | 'activate';
    data: any;
  }>): Promise<any[]> {
    console.log(`üîÑ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ CQRS`);

    const results = [];

    for (const operation of operations) {
      try {
        let result;

        switch (operation.type) {
          case 'create':
            result = await this.createUser(operation.data);
            break;
          case 'update':
            result = await this.updateUser(operation.data);
            break;
          case 'activate':
            result = await this.activateUser(operation.data.userId);
            break;
          default:
            throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation.type}`);
        }

        results.push({
          success: true,
          operation: operation.type,
          result
        });

        console.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è ${operation.type} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      } catch (error) {
        results.push({
          success: false,
          operation: operation.type,
          error: error.message
        });

        console.log(`‚ùå –û–ø–µ—Ä–∞—Ü–∏—è ${operation.type} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: ${error.message}`);
      }
    }

    return results;
  }
} 