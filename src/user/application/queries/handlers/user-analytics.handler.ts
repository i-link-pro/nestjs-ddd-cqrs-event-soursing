import { Injectable } from '@nestjs/common';
import { QueryHandler } from '@shared/application/query.interface';
import { GetUserAnalyticsQuery, GetUserRecommendationsQuery, GetUserHealthCheckQuery } from '../user-analytics.query';
import { UserReadModelRepositoryInterface } from '../../../infrastructure/read-models/user-read-model.repository.interface';
import { UserDomainServiceEnhanced } from '../../../domain/services/user-domain-service.enhanced';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
@Injectable()
export class GetUserAnalyticsHandler implements QueryHandler<GetUserAnalyticsQuery, any> {
  constructor(
    private readonly userReadRepository: UserReadModelRepositoryInterface
  ) {}

  async handle(query: GetUserAnalyticsQuery): Promise<any> {
    console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å: GetUserAnalyticsQuery (–ø–µ—Ä–∏–æ–¥: ${query.period})`);

    query.validate();

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await this.userReadRepository.getStatistics();

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
    const periodData = await this.getPeriodData(query.period);

    const analytics = {
      period: query.period,
      timestamp: new Date().toISOString(),
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      overview: {
        totalUsers: stats.total,
        activeUsers: stats.active,
        emailVerifiedUsers: stats.emailVerified,
        premiumUsers: stats.premium,
        
        // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        activeRate: stats.total > 0 ? (stats.active / stats.total * 100).toFixed(2) + '%' : '0%',
        verificationRate: stats.total > 0 ? (stats.emailVerified / stats.total * 100).toFixed(2) + '%' : '0%',
        premiumRate: stats.total > 0 ? (stats.premium / stats.total * 100).toFixed(2) + '%' : '0%'
      },

      // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      statusDistribution: stats.byStatus,

      // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–æ–≤–µ—Ä–∏—è
      trustLevelDistribution: stats.byTrustLevel,

      // –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
      periodData,

      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      metadata: {
        calculatedAt: new Date().toISOString(),
        includeInactive: query.includeInactive,
        queryType: 'analytics'
      }
    };

    console.log(`‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: ${stats.total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);

    return analytics;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥
   */
  private async getPeriodData(period: string): Promise<any> {
    const now = new Date();
    let startDate: Date;

    switch (period) {
      case 'day':
        startDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);
        break;
      case 'week':
        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        break;
      case 'month':
        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
        break;
      case 'year':
        startDate = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);
        break;
      default:
        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    // –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
    return {
      period,
      startDate: startDate.toISOString(),
      endDate: now.toISOString(),
      trends: {
        registrations: `–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ç—Ä–µ–Ω–¥ –∑–∞ ${period}`,
        activations: `–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ç—Ä–µ–Ω–¥ –∑–∞ ${period}`,
        emailVerifications: `–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ç—Ä–µ–Ω–¥ –∑–∞ ${period}`
      }
    };
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
@Injectable()
export class GetUserRecommendationsHandler implements QueryHandler<GetUserRecommendationsQuery, any> {
  constructor(
    private readonly userReadRepository: UserReadModelRepositoryInterface,
    private readonly userDomainService: UserDomainServiceEnhanced
  ) {}

  async handle(query: GetUserRecommendationsQuery): Promise<any> {
    console.log(`üí° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å: GetUserRecommendationsQuery –¥–ª—è ${query.userId}`);

    query.validate();

    const user = await this.userReadRepository.findById(query.userId);
    if (!user) {
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${query.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const recommendations = this.generateRecommendations(user);

    console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${recommendations.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`);

    return {
      userId: query.userId,
      userProfile: {
        trustLevel: user.trustLevel,
        isPremium: user.isPremium,
        daysSinceCreation: user.daysSinceCreation,
        isActive: user.isActive
      },
      recommendations,
      generatedAt: new Date().toISOString()
    };
  }

  private generateRecommendations(user: any): any[] {
    const recommendations = [];

    if (!user.isEmailVerified) {
      recommendations.push({
        type: 'email_verification',
        priority: 'high',
        title: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email',
        description: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –ø–æ–≤—ã—Å–∏—Ç —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è'
      });
    }

    if (user.trustLevel === 'low') {
      recommendations.push({
        type: 'profile_completion',
        priority: 'medium',
        title: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å',
        description: '–î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ'
      });
    }

    if (!user.isPremium && user.trustLevel === 'high') {
      recommendations.push({
        type: 'premium_upgrade',
        priority: 'low',
        title: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º'
      });
    }

    return recommendations;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
@Injectable()
export class GetUserHealthCheckHandler implements QueryHandler<GetUserHealthCheckQuery, any> {
  constructor(
    private readonly userReadRepository: UserReadModelRepositoryInterface,
    private readonly userDomainService: UserDomainServiceEnhanced
  ) {}

  async handle(query: GetUserHealthCheckQuery): Promise<any> {
    console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å: GetUserHealthCheckQuery –¥–ª—è ${query.userId}`);

    query.validate();

    const user = await this.userReadRepository.findById(query.userId);
    if (!user) {
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${query.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –¥–æ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    const healthCheck = {
      userId: query.userId,
      timestamp: new Date().toISOString(),
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
      profile: {
        email: user.email,
        fullName: user.fullName,
        status: user.status,
        trustLevel: user.trustLevel,
        isPremium: user.isPremium
      },

      // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      activity: {
        daysSinceCreation: user.daysSinceCreation,
        daysSinceLastLogin: user.daysSinceLastLogin,
        isRecentlyActive: user.daysSinceLastLogin !== null && user.daysSinceLastLogin <= 30
      },

      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      security: {
        emailVerified: user.isEmailVerified,
        emailVerifiedAt: user.emailVerifiedAt?.toISOString() || null,
        accountStatus: user.status
      },

      // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
      overallHealth: this.calculateOverallHealth(user),

      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
      improvements: this.getImprovementSuggestions(user)
    };

    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}`);

    return healthCheck;
  }

  private calculateOverallHealth(user: any): string {
    let score = 0;

    if (user.isEmailVerified) score += 25;
    if (user.isActive) score += 25;
    if (user.isPremium) score += 20;
    if (user.trustLevel === 'high' || user.trustLevel === 'premium') score += 20;
    if (user.daysSinceLastLogin !== null && user.daysSinceLastLogin <= 7) score += 10;

    if (score >= 80) return 'excellent';
    else if (score >= 60) return 'good';
    else if (score >= 40) return 'fair';
    else return 'poor';
  }

  private getImprovementSuggestions(user: any): string[] {
    const suggestions = [];

    if (!user.isEmailVerified) {
      suggestions.push('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã');
    }

    if (!user.isActive) {
      suggestions.push('–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç');
    }

    if (user.daysSinceLastLogin === null || user.daysSinceLastLogin > 30) {
      suggestions.push('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }

    if (user.trustLevel === 'low') {
      suggestions.push('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è');
    }

    return suggestions;
  }
} 