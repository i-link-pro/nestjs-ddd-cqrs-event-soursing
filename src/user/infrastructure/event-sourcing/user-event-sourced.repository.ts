import { Injectable } from '@nestjs/common';
import { EventSourcedRepository, ConcurrencyError } from '../../../shared/event-sourcing/event-sourced-repository.interface';
import { EventStore, StoredEvent } from '../../../shared/event-sourcing/event-store.interface';
import { AggregateSnapshot, SnapshotStore } from '../../../shared/event-sourcing/event-sourced-aggregate';
import { UserEventSourcedAggregate } from '../../domain/entities/user-event-sourced.aggregate';
import { BaseDomainEvent } from '../../../shared/domain/domain-event';
import { UserCreatedEvent } from '../../domain/events/user-created.event';
import { UserActivatedEvent } from '../../domain/events/user-activated.event';
import { UserBlockedEvent } from '../../domain/events/user-blocked.event';
import { UserEmailVerifiedEvent } from '../../domain/events/user-email-verified.event';
import { UserEmailChangedEvent } from '../../domain/events/user-email-changed.event';

/**
 * Event Sourced —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è User –∞–≥—Ä–µ–≥–∞—Ç–∞
 * 
 * –≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:
 * 1. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç—ã –∏–∑ —Å–æ–±—ã—Ç–∏–π (–∏–ª–∏ —Å–Ω–∏–º–∫–æ–≤ + —Å–æ–±—ã—Ç–∏—è)
 * 2. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ Event Store
 * 3. –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–Ω–∏–º–∫–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
@Injectable()
export class UserEventSourcedRepository implements EventSourcedRepository<UserEventSourcedAggregate> {
  constructor(
    private readonly eventStore: EventStore,
    private readonly snapshotStore?: SnapshotStore
  ) {}

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ç –ø–æ ID
   * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Å–æ–±—ã—Ç–∏–π –∏–ª–∏ —Å–Ω–∏–º–∫–∞ + —Å–æ–±—ã—Ç–∏—è
   */
  async getById(id: string): Promise<UserEventSourcedAggregate | null> {
    try {
      let aggregate: UserEventSourcedAggregate;
      let fromVersion = 0;

      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–Ω–∏–º–æ–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      if (this.snapshotStore) {
        const snapshot = await this.snapshotStore.getSnapshot(id);
        if (snapshot) {
          console.log(`üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω —Å–Ω–∏–º–æ–∫ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–∞ ${id}, –≤–µ—Ä—Å–∏—è ${snapshot.version}`);
          aggregate = UserEventSourcedAggregate.fromSnapshot(snapshot);
          fromVersion = snapshot.version;
        }
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ —Å–Ω–∏–º–∫–∞ (–∏–ª–∏ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ —Å–Ω–∏–º–∫–∞ –Ω–µ—Ç)
      const storedEvents = await this.eventStore.getEventsForAggregate(id, fromVersion);
      
      if (storedEvents.length === 0 && fromVersion === 0) {
        // –ê–≥—Ä–µ–≥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        return null;
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–Ω–∏–º–æ–∫, –Ω–æ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
      if (storedEvents.length === 0 && fromVersion > 0) {
        return aggregate!;
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º StoredEvent –≤ –¥–æ–º–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      const domainEvents = this.deserializeEvents(storedEvents);

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–Ω–∏–º–æ–∫, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
      if (fromVersion > 0) {
        domainEvents.forEach(event => {
          aggregate.applyEvent(event, false);
        });
        return aggregate;
      }

      // –ï—Å–ª–∏ —Å–Ω–∏–º–∫–∞ –Ω–µ—Ç, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ç –∏–∑ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
      return UserEventSourcedAggregate.fromHistory(domainEvents);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≥—Ä–µ–≥–∞—Ç–∞ ${id}:`, error);
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ç
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ Event Store
   */
  async save(aggregate: UserEventSourcedAggregate): Promise<void> {
    const uncommittedEvents = aggregate.getUncommittedEvents();
    
    if (uncommittedEvents.length === 0) {
      console.log(`‚ÑπÔ∏è –ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–∞ ${aggregate.id}`);
      return;
    }

    try {
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      const expectedVersion = aggregate.version - uncommittedEvents.length;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è
      await this.eventStore.saveEvents(
        aggregate.id,
        uncommittedEvents,
        expectedVersion
      );

      // –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ
      aggregate.markEventsAsCommitted();

      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${uncommittedEvents.length} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–∞ ${aggregate.id}`);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ –∫–∞–∂–¥—ã–µ 10 —Å–æ–±—ã—Ç–∏–π
      if (this.snapshotStore && aggregate.version % 10 === 0) {
        await this.createSnapshot(aggregate);
      }

    } catch (error) {
      if (error instanceof ConcurrencyError) {
        console.error(`üîí –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≥—Ä–µ–≥–∞—Ç–∞ ${aggregate.id}:`, error.message);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≥—Ä–µ–≥–∞—Ç–∞ ${aggregate.id}:`, error);
      }
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–æ–∫ –∞–≥—Ä–µ–≥–∞—Ç–∞
   */
  async createSnapshot(aggregate: UserEventSourcedAggregate): Promise<void> {
    if (!this.snapshotStore) {
      console.warn('‚ö†Ô∏è SnapshotStore –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return;
    }

    try {
      const snapshot = aggregate.createSnapshot();
      await this.snapshotStore.saveSnapshot(snapshot);
      console.log(`üì∏ –°–æ–∑–¥–∞–Ω —Å–Ω–∏–º–æ–∫ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–∞ ${aggregate.id}, –≤–µ—Ä—Å–∏—è ${snapshot.version}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω–∏–º–∫–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–∞ ${aggregate.id}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∞–≥—Ä–µ–≥–∞—Ç–∞ –±–µ–∑ –µ–≥–æ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  async getVersion(id: string): Promise<number> {
    const events = await this.eventStore.getEventsForAggregate(id);
    return events.length > 0 ? events[events.length - 1].metadata.aggregateVersion : 0;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–∞
   */
  async exists(id: string): Promise<boolean> {
    const events = await this.eventStore.getEventsForAggregate(id);
    return events.length > 0;
  }

  // === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ===

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å StoredEvent –≤ –¥–æ–º–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  private deserializeEvents(storedEvents: StoredEvent[]): BaseDomainEvent[] {
    return storedEvents.map(storedEvent => {
      const eventType = storedEvent.metadata.eventType;
      const eventData = storedEvent.data;

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç–∏–ø–∞
      switch (eventType) {
        case 'UserCreatedEvent':
          return new UserCreatedEvent(
            eventData.aggregateId,
            eventData.email,
            eventData.fullName || `${eventData.firstName || ''} ${eventData.lastName || ''}`.trim()
          );

        case 'UserActivatedEvent':
          return new UserActivatedEvent(
            eventData.aggregateId,
            eventData.email
          );

        case 'UserBlockedEvent':
          return new UserBlockedEvent(
            eventData.aggregateId,
            eventData.email,
            eventData.reason
          );

        case 'UserEmailVerifiedEvent':
          return new UserEmailVerifiedEvent(
            eventData.aggregateId,
            eventData.email
          );

        case 'UserEmailChangedEvent':
          return new UserEmailChangedEvent(
            eventData.aggregateId,
            eventData.oldEmail,
            eventData.newEmail
          );

        default:
          console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: ${eventType}`);
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          return {
            aggregateId: eventData.aggregateId,
            occurredAt: new Date(eventData.occurredAt || new Date()),
            eventId: 'unknown',
            eventVersion: 1,
            aggregateType: 'User'
          } as BaseDomainEvent;
      }
    });
  }

  // === –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è ===

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π –∞–≥—Ä–µ–≥–∞—Ç–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
   */
  async getEventHistory(id: string): Promise<Array<{
    version: number;
    eventType: string;
    timestamp: Date;
    data: any;
  }>> {
    const events = await this.eventStore.getEventsForAggregate(id);
    
    return events.map(event => ({
      version: event.metadata.aggregateVersion,
      eventType: event.metadata.eventType,
      timestamp: event.metadata.timestamp,
      data: event.data
    }));
  }

  /**
   * –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∞–≥—Ä–µ–≥–∞—Ç –∏–∑ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π
   * –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
   */
  async replayFromHistory(id: string): Promise<UserEventSourcedAggregate | null> {
    const storedEvents = await this.eventStore.getEventsForAggregate(id, 0);
    
    if (storedEvents.length === 0) {
      return null;
    }

    const domainEvents = this.deserializeEvents(storedEvents);
    return UserEventSourcedAggregate.fromHistory(domainEvents);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–≥—Ä–µ–≥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
   * –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤
   */
  async getUsersCreatedBetween(fromDate: Date, toDate: Date): Promise<Array<{
    userId: string;
    email: string;
    fullName: string;
    createdAt: Date;
  }>> {
    const events = await this.eventStore.getEventsByAggregateType('User', fromDate, toDate);
    
    return events
      .filter(event => event.metadata.eventType === 'UserCreatedEvent')
      .map(event => ({
        userId: event.data.aggregateId,
        email: event.data.email,
        fullName: event.data.fullName || 'Unknown User',
        createdAt: event.metadata.timestamp
      }));
  }
}