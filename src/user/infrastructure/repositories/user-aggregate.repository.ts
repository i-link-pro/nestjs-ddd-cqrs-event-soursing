import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User, UserStatus } from '../../domain/entities/user-aggregate';
import { Email } from '../../domain/value-objects/email';
import { UserRepositoryInterface } from '../../domain/repositories/user.repository.interface';
import { UserTypeOrmEntity } from '../entities/user.typeorm-entity';
import { UserFactory } from '../../domain/factories/user.factory';

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ TypeORM (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–æ–≤)
 * 
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å User –∫–∞–∫ —Å –∫–æ—Ä–Ω–µ–º –∞–≥—Ä–µ–≥–∞—Ç–∞:
 * 1. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç UserFactory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–º–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
 * 3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –º–∞–ø–ø–∏—Ç –º–µ–∂–¥—É –¥–æ–º–µ–Ω–Ω—ã–º–∏ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏
 * 4. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
 */
@Injectable()
export class UserAggregateRepository implements UserRepositoryInterface {
  constructor(
    @InjectRepository(UserTypeOrmEntity)
    private readonly ormRepository: Repository<UserTypeOrmEntity>
  ) {}

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –í —Å–ª—É—á–∞–µ –∞–≥—Ä–µ–≥–∞—Ç–∞ —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–º–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  async save(user: User): Promise<User> {
    const ormEntity = this.toOrmEntity(user);
    const saved = await this.ormRepository.save(ormEntity);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–º–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã event publisher)
    if (user.hasUnpublishedEvents()) {
      console.log(`üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –∏–º–µ–µ—Ç ${user.domainEvents.length} –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:`);
      user.domainEvents.forEach(event => {
        console.log(`   - ${event.constructor.name}: ${JSON.stringify(event)}`);
      });
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ DomainEventPublisher
      // await this.eventPublisher.publishAll(user.domainEvents);
      
      // –û—á–∏—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ "–ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
      user.clearDomainEvents();
    }
    
    return this.toDomainAggregate(saved);
  }

  /**
   * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   */
  async findById(id: string): Promise<User | null> {
    const ormEntity = await this.ormRepository.findOne({ where: { id } });
    return ormEntity ? this.toDomainAggregate(ormEntity) : null;
  }

  /**
   * –ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async findAll(): Promise<User[]> {
    const ormEntities = await this.ormRepository.find({
      order: { createdAt: 'DESC' }
    });
    return ormEntities.map(entity => this.toDomainAggregate(entity));
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async update(user: User): Promise<User> {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ save, –Ω–æ –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    return await this.save(user);
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   */
  async delete(id: string): Promise<void> {
    await this.ormRepository.delete(id);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   */
  async exists(id: string): Promise<boolean> {
    const count = await this.ormRepository.count({ where: { id } });
    return count > 0;
  }

  /**
   * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
   */
  async findByEmail(email: Email): Promise<User | null> {
    const ormEntity = await this.ormRepository.findOne({ 
      where: { email: email.value } 
    });
    return ormEntity ? this.toDomainAggregate(ormEntity) : null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º email
   */
  async existsByEmail(email: Email): Promise<boolean> {
    const count = await this.ormRepository.count({ 
      where: { email: email.value } 
    });
    return count > 0;
  }

  /**
   * –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async findActiveUsers(): Promise<User[]> {
    const ormEntities = await this.ormRepository.find({
      where: { status: 'active' },
      order: { createdAt: 'DESC' }
    });
    return ormEntities.map(entity => this.toDomainAggregate(entity));
  }

  /**
   * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º email
   */
  async findUnverifiedUsers(): Promise<User[]> {
    const ormEntities = await this.ormRepository.find({
      where: { emailVerifiedAt: null },
      order: { createdAt: 'DESC' }
    });
    return ormEntities.map(entity => this.toDomainAggregate(entity));
  }

  /**
   * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Ö–æ–¥–∏–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –±–æ–ª–µ–µ N –¥–Ω–µ–π
   */
  async findInactiveUsers(days: number): Promise<User[]> {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - days);

    const ormEntities = await this.ormRepository
      .createQueryBuilder('user')
      .where('user.lastLoginAt < :cutoffDate OR user.lastLoginAt IS NULL')
      .andWhere('user.createdAt < :cutoffDate')
      .setParameters({ cutoffDate })
      .orderBy('user.createdAt', 'DESC')
      .getMany();

    return ormEntities.map(entity => this.toDomainAggregate(entity));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
   */
  async getUsersCountByStatus(): Promise<{
    active: number;
    inactive: number;
    blocked: number;
    pending: number;
  }> {
    const counts = await this.ormRepository
      .createQueryBuilder('user')
      .select('user.status', 'status')
      .addSelect('COUNT(*)', 'count')
      .groupBy('user.status')
      .getRawMany();

    const result = {
      active: 0,
      inactive: 0,
      blocked: 0,
      pending: 0
    };

    counts.forEach(count => {
      result[count.status as keyof typeof result] = parseInt(count.count);
    });

    return result;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–∞ –≤ ORM —Å—É—â–Ω–æ—Å—Ç—å
   * –ú–∞–ø–ø–∏–Ω–≥ –∏–∑ Rich Domain Model –≤ Anemic Data Model
   */
  private toOrmEntity(user: User): UserTypeOrmEntity {
    const ormEntity = new UserTypeOrmEntity();
    ormEntity.id = user.id;
    ormEntity.email = user.email.value;
    ormEntity.firstName = user.userName.firstName;
    ormEntity.lastName = user.userName.lastName;
    ormEntity.status = user.status;
    ormEntity.lastLoginAt = user.lastLoginAt;
    ormEntity.emailVerifiedAt = user.emailVerifiedAt;
    ormEntity.createdAt = user.createdAt;
    ormEntity.updatedAt = user.updatedAt;
    return ormEntity;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ORM —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –¥–æ–º–µ–Ω–Ω—ã–π –∞–≥—Ä–µ–≥–∞—Ç
   * –ú–∞–ø–ø–∏–Ω–≥ –∏–∑ Anemic Data Model –≤ Rich Domain Model
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç UserFactory –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–∞
   */
  private toDomainAggregate(ormEntity: UserTypeOrmEntity): User {
    return UserFactory.restore({
      id: ormEntity.id,
      email: ormEntity.email,
      firstName: ormEntity.firstName,
      lastName: ormEntity.lastName,
      status: ormEntity.status as UserStatus,
      createdAt: ormEntity.createdAt,
      updatedAt: ormEntity.updatedAt,
      lastLoginAt: ormEntity.lastLoginAt,
      emailVerifiedAt: ormEntity.emailVerifiedAt
    });
  }
} 