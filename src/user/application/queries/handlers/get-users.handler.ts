import { Injectable } from '@nestjs/common';
import { QueryHandler, PaginatedResult } from '@shared/application/query.interface';
import { GetUsersQuery } from '../get-user.query';
import { UserReadModelRepositoryInterface } from '../../../infrastructure/read-models/user-read-model.repository.interface';
import { UserReadModel } from '../../../infrastructure/read-models/user.read-model';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
@Injectable()
export class GetUsersHandler implements QueryHandler<GetUsersQuery, PaginatedResult<UserReadModel>> {
  constructor(
    private readonly userReadRepository: UserReadModelRepositoryInterface
  ) {}

  async handle(query: GetUsersQuery): Promise<PaginatedResult<UserReadModel>> {
    console.log(`üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å: GetUsersQuery (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${query.page}, –ª–∏–º–∏—Ç ${query.limit})`);

    query.validate();

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    const filters: any = {};
    if (query.status) {
      filters.status = query.status;
    }
    if (query.emailVerified !== undefined) {
      filters.emailVerified = query.emailVerified;
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const result = await this.userReadRepository.findWithPagination({
      page: query.page,
      limit: query.limit,
      filters,
      sortBy: query.sortBy,
      sortOrder: query.sortOrder
    });

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${result.items.length}`);

    return result;
  }
} 