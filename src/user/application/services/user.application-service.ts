import { Injectable } from '@nestjs/common';
import { User } from '../../domain/entities/user.entity';
import { Email } from '../../domain/value-objects/email';
import { UserName } from '../../domain/value-objects/user-name';
import { UserRepositoryInterface } from '../../domain/repositories/user.repository.interface';
import { UserDomainService } from '../../domain/services/user.domain-service';
import { CreateUserCommand } from '../commands/create-user.command';
import { UpdateUserCommand } from '../commands/update-user.command';

/**
 * –°–µ—Ä–≤–∏—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * 
 * –°–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ DDD:
 * 1. –û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–æ–ø–µ—Ä–∞—Ü–∏–π
 * 2. –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—Ç —Ä–∞–±–æ—Ç—É –º–µ–∂–¥—É –¥–æ–º–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
 * 3. –£–ø—Ä–∞–≤–ª—è—é—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
 * 4. –ù–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É (–æ–Ω–∞ –≤ –¥–æ–º–µ–Ω–Ω–æ–º —Å–ª–æ–µ)
 * 
 * –≠—Ç–æ —Å–ª–æ–π –º–µ–∂–¥—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–º –∏ –¥–æ–º–µ–Ω–Ω—ã–º —Å–ª–æ–µ–º.
 */
@Injectable()
export class UserApplicationService {
  constructor(
    private readonly userRepository: UserRepositoryInterface,
    private readonly userDomainService: UserDomainService
  ) {}

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param command - –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns Promise —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  async createUser(command: CreateUserCommand): Promise<User> {
    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
    command.validate();

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤-–∑–Ω–∞—á–µ–Ω–∏–π
    const email = Email.create(command.email);
    const userName = UserName.create(command.firstName, command.lastName);

    // 3. –î–æ–º–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email)
    await this.userDomainService.validateEmailUniqueness(email);

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–µ–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
    const user = new User(email, userName);

    // 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    const savedUser = await this.userRepository.save(user);

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${savedUser.email.value}`);
    
    return savedUser;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns Promise —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   * @throws Error –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  async getUserById(userId: string): Promise<User> {
    if (!userId?.trim()) {
      throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    const user = await this.userRepository.findById(userId);
    
    if (!user) {
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    return user;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
   * @param email - email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns Promise —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   * @throws Error –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  async getUserByEmail(email: string): Promise<User> {
    if (!email?.trim()) {
      throw new Error('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    const emailVO = Email.create(email);
    const user = await this.userRepository.findByEmail(emailVO);
    
    if (!user) {
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    return user;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns Promise —Å –º–∞—Å—Å–∏–≤–æ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async getAllUsers(): Promise<User[]> {
    return await this.userRepository.findAll();
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param command - –∫–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns Promise —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  async updateUser(command: UpdateUserCommand): Promise<User> {
    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
    command.validate();

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.getUserById(command.userId);

    // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
    if (command.firstName || command.lastName) {
      const firstName = command.firstName || user.userName.firstName;
      const lastName = command.lastName || user.userName.lastName;
      const newUserName = UserName.create(firstName, lastName);
      user.changeUserName(newUserName);
    }

    // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ email, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (command.email) {
      const newEmail = Email.create(command.email);
      await this.userDomainService.validateEmailChange(user, newEmail);
      user.changeEmail(newEmail);
    }

    // 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const updatedUser = await this.userRepository.update(user);

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${updatedUser.id}`);
    
    return updatedUser;
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns Promise —Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  async activateUser(userId: string): Promise<User> {
    const user = await this.getUserById(userId);
    
    user.activate();
    
    const updatedUser = await this.userRepository.update(user);
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${updatedUser.email.value}`);
    
    return updatedUser;
  }

  /**
   * –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns Promise —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  async blockUser(userId: string): Promise<User> {
    const user = await this.getUserById(userId);
    
    user.block();
    
    const updatedUser = await this.userRepository.update(user);
    
    console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${updatedUser.email.value}`);
    
    return updatedUser;
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns Promise —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º email
   */
  async verifyUserEmail(userId: string): Promise<User> {
    const user = await this.getUserById(userId);
    
    user.verifyEmail();
    
    const updatedUser = await this.userRepository.update(user);
    
    console.log(`‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${updatedUser.email.value}`);
    
    return updatedUser;
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async deleteUser(userId: string): Promise<void> {
    const user = await this.getUserById(userId);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–æ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    const canDelete = await this.userDomainService.canUserBeDeleted(user);
    
    if (!canDelete.canDelete) {
      throw new Error(canDelete.reason || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω');
    }
    
    await this.userRepository.delete(userId);
    
    console.log(`üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω: ${user.email.value}`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * @returns Promise —Å –æ–±—ä–µ–∫—Ç–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  async getUsersStatistics(): Promise<{
    total: number;
    byStatus: {
      active: number;
      inactive: number;
      blocked: number;
      pending: number;
    };
  }> {
    const [allUsers, statusCounts] = await Promise.all([
      this.userRepository.findAll(),
      this.userRepository.getUsersCountByStatus()
    ]);

    return {
      total: allUsers.length,
      byStatus: statusCounts
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns Promise —Å –º–∞—Å—Å–∏–≤–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  async getUserRecommendations(userId: string): Promise<string[]> {
    const user = await this.getUserById(userId);
    return this.userDomainService.generateUserRecommendations(user);
  }
} 