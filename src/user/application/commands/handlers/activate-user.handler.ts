import { Injectable } from '@nestjs/common';
import { CommandHandler } from '@shared/application/command.interface';
import { User } from '../../../domain/entities/user-aggregate';
import { UserRepositoryInterface } from '../../../domain/repositories/user.repository.interface';
import { UserDomainServiceEnhanced } from '../../../domain/services/user-domain-service.enhanced';

/**
 * –ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export class ActivateUserCommand {
  constructor(public readonly userId: string) {}

  validate(): void {
    if (!this.userId?.trim()) {
      throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
@Injectable()
export class ActivateUserHandler implements CommandHandler<ActivateUserCommand, User> {
  constructor(
    private readonly userRepository: UserRepositoryInterface,
    private readonly userDomainService: UserDomainServiceEnhanced
  ) {}

  async handle(command: ActivateUserCommand): Promise<User> {
    console.log(`üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É: ActivateUserCommand –¥–ª—è ${command.userId}`);

    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
    command.validate();

    // 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–∞
    const user = await this.userRepository.findById(command.userId);
    if (!user) {
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${command.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
    const canActivate = this.userDomainService.canUserBeActivated(user);
    if (!canActivate.canActivate) {
      throw new Error(canActivate.reason || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }

    // 4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–º–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    user.activate();

    // 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const activatedUser = await this.userRepository.update(user);

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ CQRS: ${activatedUser.id}`);
    
    return activatedUser;
  }
} 